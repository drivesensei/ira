name: Release

on:
  push:
    tags:
      - 'v*.*.*' # Triggers the workflow on tags like v1.0.0

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            archive_ext: tar.gz
            archive_filename: ira-linux-${{ github.run_number }}.tar.gz
          - os: macos-latest
            platform: macos
            archive_ext: tar.gz
            archive_filename: ira-macos-${{ github.run_number }}.tar.gz
          - os: windows-latest
            platform: windows
            archive_ext: zip
            archive_filename: ira-windows-${{ github.run_number }}.zip

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/index
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache Cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Build Release Binary
        run: cargo build --release

      # Archive binary for Linux and macOS
      - name: Archive Binary (Linux/macOS)
        if: matrix.platform == 'linux' || matrix.platform == 'macos'
        run: tar -czf ${{ matrix.archive_filename }} -C target/release ira
        shell: bash

      # Archive binary for Windows
      - name: Archive Binary (Windows)
        if: matrix.platform == 'windows'
        run: |
          Compress-Archive -Path target\release\ira.exe -DestinationPath ${{ matrix.archive_filename }}
        shell: pwsh # Use PowerShell Core

      # Verify Archive Exists (Linux/macOS)
      - name: Verify Archive Exists (Linux/macOS)
        if: matrix.platform == 'linux' || matrix.platform == 'macos'
        run: |
          if [ ! -f ${{ matrix.archive_filename }} ]; then
            echo "Archive file not found: ${{ matrix.archive_filename }}"
            exit 1
          fi
        shell: bash

      # Verify Archive Exists (Windows)
      - name: Verify Archive Exists (Windows)
        if: matrix.platform == 'windows'
        run: |
          if (!(Test-Path -Path ${{ matrix.archive_filename }})) {
            Write-Error "Archive file not found: ${{ matrix.archive_filename }}"
            exit 1
          }
        shell: pwsh

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ira-${{ matrix.platform }}
          path: ${{ matrix.archive_filename }}

  create_release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Linux Artifact
        uses: actions/download-artifact@v3
        with:
          name: ira-linux-${{ github.run_number }}.tar.gz
          path: release_assets/

      - name: Download macOS Artifact
        uses: actions/download-artifact@v3
        with:
          name: ira-macos-${{ github.run_number }}.tar.gz
          path: release_assets/

      - name: Download Windows Artifact
        uses: actions/download-artifact@v3
        with:
          name: ira-windows-${{ github.run_number }}.zip
          path: release_assets/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./release_assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
